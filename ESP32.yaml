esphome:
  name: esphome-web-c2d1cc
  friendly_name: AC_South_AtomLight
  min_version: 2024.11.0
  name_add_mac_suffix: false
  includes:
    - led_proto2.h

#esp32:
#  board: esp32dev
#  framework:
#    type: esp-idf

esp32:
  board: m5stack-core-esp32
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.50.67
    gateway: !secret gateway
    dns1: !secret dns
    subnet: 255.255.255.0
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Aircon-Keypad Fallback Hotspot"
    password: "M3odvzX6U8gI"

captive_portal:

web_server:
  port: 80

  
#Setup i2c bus to controll MCP4725
#https://esphome.io/components/i2c#i2c
i2c:
  sda: 25
  scl: 21
  scan: true

#MCP4725 output to Send Voltages for key presses 
#https://esphome.io/components/output/mcp4725
output:
  - platform: mcp4725
    id: dac_output
    address: 0x60


##***TESTING***
# Define a number input component to output mV to the DAC
number:
  - platform: template
    name: "DAC Output miliVolts"
    min_value: 0
    max_value: 5000  # Adjust this value according to the DAC's range
    step: 0.1    # Adjust the step size as needed
    restore_value: true
    optimistic: true
    on_value:
      then:
        lambda: |-
          id(dac_output).set_level((x / 5000.0));
###############################################################

#Template sensors will be populated from lambda custom component
sensor:
  - platform: template
    name: "Setpoint Temperature"
    unit_of_measurement: "Â°C" 
    accuracy_decimals: 1     
    id: setpoint_temp
    state_class: measurement
    icon: mdi:thermometer
  
  - platform: template
    name: "Bit Count"
    id: bit_count
    state_class: measurement
    accuracy_decimals: 0
    
text_sensor:
  - platform: template
    name: "Bit String"
    id: bit_string

binary_sensor:
  - platform: template
    name: "Cool"
    icon: mdi:snowflake
    id: cool
  - platform: template
    name: "Auto"
    icon: mdi:flash-auto
    id: auto_md
  - platform: template
    name: "unk1"
    id: unk1
  - platform: template
    name: "Run"
    icon: mdi:run
    id: run
      delay_off:
        seconds: 2
  - platform: template
    name: "Room"
    id: room
  - platform: template
    name: "unk2"
    id: unk2
  - platform: template
    name: "unk3"
    id: unk3
  - platform: template
    name: "unk4"
    id: unk4
  - platform: template
    name: "Fan Continuos"
    icon: mdi:fan-chevron-up
    id: fan_cont
  - platform: template
    name: "Fan Hi"
    icon: mdi:fan-speed-3
    id: fan_hi
  - platform: template
    name: "Fan Mid"
    icon: mdi:fan-speed-2
    id: fan_mid
  - platform: template
    name: "Fan Low"
    icon: mdi:fan-speed-1
    id: fan_low
  - platform: template
    name: "Zone Kitchen"
    id: room3
    icon: mdi:countertop
  - platform: template
    name: "Zone Media"
    id: room4
    icon: mdi:multimedia
  - platform: template
    name: "Zone Bed 3"
    id: room2
    icon: mdi:bed
  - platform: template
    name: "Heat"
    icon: mdi:fire
    id: heat
  - platform: template
    name: "Zone Bed 2"
    id: room1
    icon: mdi:bed
  - platform: template
    name: "unk5"
    id: unk5

#Populate all template sensors from lambda custom component
#First argument of KeypadStatus is the pin number of the ADC input
custom_component:
  - lambda: |-
      auto keypad_status = new KeypadStatus(33,
                                            id(bit_string), id(setpoint_temp), id(bit_count),  
                                            id(cool), id(auto_md), id(unk1), id(run), 
                                            id(room), id(unk2), id(unk3), id(unk4), 
                                            id(fan_cont), id(fan_hi), id(fan_mid), id(fan_low), 
                                            id(room3), id(room4), id(room2), id(heat), 
                                            id(room1), id(unk5)
                                            );
      return {keypad_status};
    components:
      id: keypad_status
